// Generated by gencpp from file action_demo/LinewalkGoal.msg
// DO NOT EDIT!


#ifndef ACTION_DEMO_MESSAGE_LINEWALKGOAL_H
#define ACTION_DEMO_MESSAGE_LINEWALKGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace action_demo
{
template <class ContainerAllocator>
struct LinewalkGoal_
{
  typedef LinewalkGoal_<ContainerAllocator> Type;

  LinewalkGoal_()
    : order(0)  {
    }
  LinewalkGoal_(const ContainerAllocator& _alloc)
    : order(0)  {
  (void)_alloc;
    }



   typedef int32_t _order_type;
  _order_type order;





  typedef boost::shared_ptr< ::action_demo::LinewalkGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::action_demo::LinewalkGoal_<ContainerAllocator> const> ConstPtr;

}; // struct LinewalkGoal_

typedef ::action_demo::LinewalkGoal_<std::allocator<void> > LinewalkGoal;

typedef boost::shared_ptr< ::action_demo::LinewalkGoal > LinewalkGoalPtr;
typedef boost::shared_ptr< ::action_demo::LinewalkGoal const> LinewalkGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::action_demo::LinewalkGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::action_demo::LinewalkGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::action_demo::LinewalkGoal_<ContainerAllocator1> & lhs, const ::action_demo::LinewalkGoal_<ContainerAllocator2> & rhs)
{
  return lhs.order == rhs.order;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::action_demo::LinewalkGoal_<ContainerAllocator1> & lhs, const ::action_demo::LinewalkGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace action_demo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::action_demo::LinewalkGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::action_demo::LinewalkGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action_demo::LinewalkGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action_demo::LinewalkGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_demo::LinewalkGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_demo::LinewalkGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::action_demo::LinewalkGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6889063349a00b249bd1661df429d822";
  }

  static const char* value(const ::action_demo::LinewalkGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6889063349a00b24ULL;
  static const uint64_t static_value2 = 0x9bd1661df429d822ULL;
};

template<class ContainerAllocator>
struct DataType< ::action_demo::LinewalkGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "action_demo/LinewalkGoal";
  }

  static const char* value(const ::action_demo::LinewalkGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::action_demo::LinewalkGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"int32 order\n"
;
  }

  static const char* value(const ::action_demo::LinewalkGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::action_demo::LinewalkGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.order);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LinewalkGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::action_demo::LinewalkGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::action_demo::LinewalkGoal_<ContainerAllocator>& v)
  {
    s << indent << "order: ";
    Printer<int32_t>::stream(s, indent + "  ", v.order);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTION_DEMO_MESSAGE_LINEWALKGOAL_H
